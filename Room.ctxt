#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ Class\ Room\ -\ a\ room\ in\ an\ adventure\ game.\ \ \r\n\r\n\ A\ "Room"\ represents\ one\ location\ in\ the\ scenery\ of\ the\ game.\ \ It\ is\ \r\n\ connected\ to\ other\ rooms\ via\ exits.\ \ The\ exits\ are\ labelled\ north,\ \r\n\ east,\ south,\ west,up\ and\ down.\ \ For\ each\ direction,\ the\ room\ stores\ a\ reference\r\n\ to\ the\ neighboring\ room,\ or\ null\ if\ there\ is\ no\ exit\ in\ that\ direction.\r\n\ \r\n\ @author\ \ Diama\ Fall\ &\ Kilian\ Felesmino\ &\ Amandine\ Poullot\ &\ Gabriel\ Brunet\r\n\ @version\ v0.1\ 2018nov\r\n
comment1.params=nameRoom\ description
comment1.target=Room(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Constructor\ \r\n\ Create\ a\ new\ Room.\r\n\ \r\n\ Initially,\ it\ has\ no\ exits.\ \r\n\ Description\ must\ contain\ at\ least\ 10\ characters\ and\ have\ not\ to\ start\ with\ a\ space.\ \r\n\ If\ we\ try\ to\ do\ that,\ an\ exception\ will\ be\ returned\ and\ the\ room\ cannot\ be\ created.\r\n\r\n\ @param\ description\ Proper\ description\ for\ the\ room\ created.\r\n\ @param\ exits\ It\ define\ the\ exits\ of\ the\ rooms\ created.\ Each\ direction\ either\ leads\ to\ another\ room\ or\ is\ null\ (no\ exists\ here)\r\n\ @param\ isVisited\ Used\ to\ inform\ if\ the\ Player\ has\ already\ visited\ the\ room.\ Useful\ to\ manage\ traps\ and\ mini\ map.\r\n\ @exception\ IllegalArgumentException\ Returned\ in\ case\ of\ description's\ troubles.\ Incorrect\ size\ or\ format.\ See\ instructions\ above.\r\n
comment10.params=
comment10.target=Item\ getItem()
comment11.params=theItem
comment11.target=void\ removeItemRoom(Item)
comment11.text=\r\n\ Remove\ an\ item\ (Item\ class)\ from\ the\ inventory\ of\ the\ character.\r\n
comment2.params=direction
comment2.target=Room\ getExit(java.lang.String)
comment2.text=\r\n\ Returns\ the\ room\ that\ we\ reach\ in\ the\ given\ direction.\r\n\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\r\n\ @param\ direction\ The\ exit's\ direction.\ It\ gives\ the\ direction\ where\ the\ exit\ is\ located.\r\n\ @return\ Directions\ of\ the\ current\ room.\r\n
comment3.params=direction\ neighbor
comment3.target=void\ setExit(java.lang.String,\ Room)
comment3.text=\r\n\ Defines\ an\ exit\ from\ this\ room.\ The\ direction\ have\ to\ be\ present\ in\ the\ enumerate\ type\ for\ directions.\r\n\r\n\ @param\ direction\ Cardinal\ direction\ (north,south,east,west,up,down).\ Represent\ keys\ in\ the\ HashMap<>.\r\n\ @param\ neighbor\ Indicates\ the\ room\ in\ the\ given\ direction.\r\n
comment4.params=
comment4.target=java.lang.String\ getExitString()
comment4.text=\r\n\ This\ method\ displays\ a\ sentence\ containing\ exits\ of\ the\ current\ room.\r\n\ \r\n\ @return\ displayExits\ String\ returned\ containing\ all\ exits\ of\ the\ current\ room.\ Use\ the\ HashMap<>\ tool.\r\n
comment5.params=
comment5.target=java.lang.String\ getDescription()
comment5.text=\r\n\ @return\ Return\ a\ string\ describing\ the\ room\ (\=description).\r\n
comment6.params=des
comment6.target=void\ setDescription(java.lang.String)
comment7.params=
comment7.target=java.lang.String\ getNameRoom()
comment7.text=\r\n\ @return\ Return\ a\ name\ at\ the\ room.\r\n
comment8.params=
comment8.target=boolean\ getIsVisited()
comment8.text=\r\n\ @return\ The\ value\ of\ the\ boolean\ isVisited.\r\n
comment9.params=theItem
comment9.target=void\ addItemRoom(Item)
comment9.text=\r\n\ Add\ an\ item\ (Item\ class)\ in\ the\ inventory\ of\ the\ character.\r\n
numComments=12
